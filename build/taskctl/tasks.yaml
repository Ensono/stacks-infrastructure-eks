tasks:

  buildnumber:
    context: powershell
    description: Update the build number
    command:
      - Update-BuildNumber

  lint:yaml:
    context: powershell
    description: Perform YAML linting
    command:
      - Invoke-YamlLint

  lint:terraform:format:
    context: powershell
    description: Perform Terraform format check
    command:
      - Invoke-Terraform -Format -Path $env:TF_FILE_LOCATION

  lint:terraform:validate:
    context: powershell
    description: Perform Terraform validation
    command:
      - Invoke-Terraform -Validate -Path $env:TF_FILE_LOCATION

  # Infrastructure tasks
  infra:init:
    context: powershell
    description: Initialise Terraform for Azure
    command:
      - Invoke-Terraform -Init -Arguments "$env:TF_BACKEND_ARGS" -Path $env:TF_FILE_LOCATION -Debug
      - Invoke-Terraform -Workspace -Arguments $env:ENV_NAME -Path $env:TF_FILE_LOCATION -Debug

  infra:plan:
    context: powershell
    description: Plan Terraform
    command:
      - (Invoke-Terraform -Plan -Path $env:TF_FILE_LOCATION -Arguments "-input=false","-out=tfplan" -Debug) -replace "{{"{{"}}", "{{"{{"}}`"{{"{{"}}`"}}"

  infra:apply:
    context: powershell
    description: Apply Terraform Plan
    command:
      - (Push-Location $env:TF_FILE_LOCATION && Invoke-Terraform -Apply -Path tfplan -Debug) -replace "{{"{{"}}", "{{"{{"}}`"{{"{{"}}`"}}"

  infra:helm:apply:
    context: powershell
    description: Deploy Helm charts to the cluster as defined by configuration file
    command:
      - |
        # Invoke-Terraform -Init -Path ${env:TF_FILE_LOCATION} -Arguments "${env:TF_BACKEND_ARGS}" -Debug
        Invoke-Terraform -Workspace -Arguments ${env:TF_VAR_name_environment} -Path ${env:TF_FILE_LOCATION}
        Invoke-Terraform -Output -Path ${env:TF_FILE_LOCATION} | /app/build/scripts/Set-EnvironmentVars.ps1 -prefix "TFOUT" -key "value"
        /app/build/scripts/Deploy-HelmCharts.ps1 /app/deploy/helm/k8s_apps.yml `
          -identifier ${env:REGION} `
          -clustername ${env:TFOUT_cluster_name} `
          -provider ${env:CLOUD_PROVIDER}

  #TODO: We should have a kluctl apply in independent runner
  infra:kluctl:apply:
    context: powershell
    description: Deploy using kluctl
    command:
      - |
        Invoke-Terraform -Workspace -Arguments ${env:TF_VAR_name_environment} -Path ${env:TF_FILE_LOCATION}
        Invoke-Terraform -Output -Path ${env:TF_FILE_LOCATION} | /app/build/scripts/Set-EnvironmentVars.ps1 -prefix "TFOUT" -key "value"
        aws eks update-kubeconfig --name ${env:TFOUT_cluster_name} --region ${env:REGION}
        cd deploy/kluctl
        kluctl deploy -y

  #kubectl was broken because wrong architecture is installed in image and kustomize missing
  #TODO: This should be fixed in the image and all these commands need to be looked at
  #TODO: Currently we are using the python forgeops tool. It would be better to extract the relevant
  #bits and deploy via kluctl
  infra:forgeops:apply:
    context: powershell
    description: Deploy forgerock
    command:
      - |
        curl -L "https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v5.1.1/kustomize_v5.1.1_linux_amd64.tar.gz"  -o /tmp/kustomize.tar.gz  &&  tar zxf /tmp/kustomize.tar.gz -C /usr/local/bin kustomize && chmod +x /usr/local/bin/kustomize
        curl -L "https://s3.us-west-2.amazonaws.com/amazon-eks/1.28.1/2023-09-14/bin/linux/amd64/kubectl" -o /usr/bin/kubectl && chmod +x /usr/bin/kubectl
        Invoke-Terraform -Workspace -Arguments ${env:TF_VAR_name_environment} -Path ${env:TF_FILE_LOCATION}
        Invoke-Terraform -Output -Path ${env:TF_FILE_LOCATION} | /app/build/scripts/Set-EnvironmentVars.ps1 -prefix "TFOUT" -key "value"
        aws eks update-kubeconfig --name ${env:TFOUT_cluster_name} --region ${env:REGION}
        cd deploy/forgeops/bin
        python forgeops install --cdk --fqdn ${env:TF_VAR_dns_hostedzone_name}

  # publish:github:
  #   context: powershell
  #   description: Publish Release to GitHub
  #   command:
  #     - Publish-GitHubRelease -artifactsList "$env:ARTIFACTS_LIST"
  #   env:
  #     generateReleaseNotes: $true
  #     #  PUBLISH_RELEASE: $true

  # update:dashboard:
  #   context: powershell
  #   description: Update the Deployment Dashboard
  #   command:
  #     - Update-InfluxDashboard
  #   # env:
  #   #  PUBLISH_RELEASE: $true


  # debug:env:
  #   context: powershell
  #   description: Debugging task to show the environment variables in the container
  #   command:
  #     - dir env:/

  # debug:location:
  #   context: powershell
  #   command:
  #     - Write-Host "***** DEBUG *****" && get-childitem -filter "*opencover.xml" -recurse

  debug:sleep:
    context: powershell
    command:
      - echo "Sleeping for {{ .sleep }}"
      - sleep {{ .sleep }}
    variables:
      sleep: 3000
